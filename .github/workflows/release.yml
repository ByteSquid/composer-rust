name: "Release"
on:
  - push
  - pull_request
  - workflow_dispatch

permissions:
  contents: write
  issues: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: latest

      - name: Release
        run : |
          pnpm --package=@semantic-release/commit-analyzer \
          --package=@semantic-release/git \
          --package=@semantic-release/exec \
          --package=semantic-release@19 \
          dlx semantic-release

      - name: Create GitHub Release
        if: ((github.ref == 'refs/heads/master') && (!contains(github.event.head_commit.message, 'chore:'))
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          body: Automated release for ${{ env.RELEASE_VERSION }}

      - name: Create Version File
        run: echo "${{ env.RELEASE_VERSION }}" > VERSION

      - name: Upload Version File
        uses: actions/upload-artifact@v3
        with:
          name: version
          path: VERSION


  build:
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Download Version File
        uses: actions/download-artifact@v3
        with:
          name: version

      - name: Read Version File
        shell: bash
        run: echo "RELEASE_VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: Overwrite version in Cargo.toml
        shell: bash
        run: |
          sed -i.bak -e 's/^version = "0\.0\.0"/version = "2.1.12"/' Cargo.toml && rm -f Cargo.toml.bak
      

      - name: Build release binary
        shell: bash
        run: cargo build --release --target ${{ matrix.target }}

      - name: Set file extension for Windows
        shell: bash
        run: |
          if [[ ${{ matrix.os }} == "windows-latest" ]]; then
            echo "EXTENSION=.exe" >> $GITHUB_ENV
          else
            echo "EXTENSION=" >> $GITHUB_ENV
          fi

      - name: Rename binary
        shell: bash
        run: |
          mv target/${{ matrix.target }}/release/composer target/${{ matrix.target }}/release/composer-${{ matrix.os }}-${{ env.RELEASE_VERSION }}${{ env.EXTENSION }}

      - name: Upload latest to latest release
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "target/${{ matrix.target }}/release/composer-${{ matrix.os }}-${{ env.RELEASE_VERSION }}${{ env.EXTENSION }}"
          update_latest_release: true


  # Additional configuration for non-glibc Linux builds (e.g., musl)
  build-linux-musl:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Setup zig for cross-compile
        run: sudo apt-get -y install musl && sudo snap install zig --beta --classic

      - name: Set up Rust with musl target
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: x86_64-unknown-linux-musl
          override: true

      - name: Download Version File
        uses: actions/download-artifact@v3
        with:
          name: version

      - name: Download Version File
        uses: actions/download-artifact@v3

      - name: Read Version File
        shell: bash
        run: echo "RELEASE_VERSION=$(cat VERSION)" >> $GITHUB_ENV


      - name: Overwrite version in Cargo.toml for musl build
        shell: bash
        run: sed -i.bak -e 's/^version = "0\.0\.0"/version = "${{ env.RELEASE_VERSION }}"/' Cargo.toml && rm -f Cargo.toml.bak


      - name: Build release binary with musl
        run: |
          cargo install cargo-zigbuild
          cargo zigbuild --release --target x86_64-unknown-linux-musl

      - name: Rename binary for musl
        run: |
          mv target/x86_64-unknown-linux-musl/release/composer target/x86_64-unknown-linux-musl/release/composer-linux-musl-${{ env.RELEASE_VERSION }}

      - name: Upload latest to latest release
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "./target/x86_64-unknown-linux-musl/release/composer-linux-musl-${{ env.RELEASE_VERSION }}"
          update_latest_release: true

  create-rpm:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up RPM build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Download Version File
        uses: actions/download-artifact@v3
        with:
          name: version

      - name: Read Version File
        run: echo "RELEASE_VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: Build composer binary with cargo
        run: |
          cargo build --release

      - name: Prepare RPM spec file
        run: |
          export APP_NAME="composer"
          export APP_VERSION="${{ env.RELEASE_VERSION }}"
          export APP_SUMMARY="A docker-compose package manager."
          export APP_LICENSE="MIT"
          export APP_URL="https://github.com/ByteSquid/composer-rust"
          export APP_SOURCE_URL="target/release/composer"
          export APP_DESCRIPTION="A docker-compose package manager."
          export APP_AUTHOR="Sam Ruff"
          export APP_AUTHOR_EMAIL="sam@bytesquid.com"
          mkdir -p $HOME/rpmbuild/{SPECS,SOURCES}
          envsubst < composer.spec.template > $HOME/rpmbuild/SPECS/composer.spec
          cp target/release/composer $HOME/rpmbuild/SOURCES/

      - name: Build RPM
        run: rpmbuild -ba $HOME/rpmbuild/SPECS/composer.spec

      - name: Upload RPM artifact
        uses: actions/upload-artifact@v3
        with:
          name: composer_rpm
          path: /home/runner/rpmbuild/RPMS/**/*.rpm

      - name: Download workflow artifact
        uses: actions/download-artifact@v2
        with:
          name: composer_rpm

      - name: Copy RPM
        run: |
          cp /home/runner/rpmbuild/RPMS/x86_64/composer-${{ env.RELEASE_VERSION }}-1.x86_64.rpm composer-${{ env.RELEASE_VERSION }}-1.x86_64.rpm

      - name: Push to PackageCloud
        uses: danielmundi/upload-packagecloud@v1
        with:
          PACKAGE-NAME: composer-${{ env.RELEASE_VERSION }}-1.x86_64.rpm
          PACKAGECLOUD-USERNAME: sam-bytesquid
          PACKAGECLOUD-DISTRIB: rpm_any/rpm_any
          PACKAGECLOUD-REPO: composer-production
          PACKAGECLOUD-TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}

      - name: Upload latest to latest release
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "composer-${{ env.RELEASE_VERSION }}-1.x86_64.rpm"
          update_latest_release: true